//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.DuplexServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientData", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class ClientData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bestDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bestVerticeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] listOfVerticesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfThreadsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bestDistance {
            get {
                return this.bestDistanceField;
            }
            set {
                if ((this.bestDistanceField.Equals(value) != true)) {
                    this.bestDistanceField = value;
                    this.RaisePropertyChanged("bestDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bestVertice {
            get {
                return this.bestVerticeField;
            }
            set {
                if ((this.bestVerticeField.Equals(value) != true)) {
                    this.bestVerticeField = value;
                    this.RaisePropertyChanged("bestVertice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] listOfVertices {
            get {
                return this.listOfVerticesField;
            }
            set {
                if ((object.ReferenceEquals(this.listOfVerticesField, value) != true)) {
                    this.listOfVerticesField = value;
                    this.RaisePropertyChanged("listOfVertices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfThreads {
            get {
                return this.numberOfThreadsField;
            }
            set {
                if ((this.numberOfThreadsField.Equals(value) != true)) {
                    this.numberOfThreadsField = value;
                    this.RaisePropertyChanged("numberOfThreads");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STAGE_TYPE", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    public enum STAGE_TYPE : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JOIN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATA_SYNC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BRIEF = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATS = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DuplexServiceReference.IDuplex", CallbackContract=typeof(ClientApp.DuplexServiceReference.IDuplexCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDuplex {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplex/Join", ReplyAction="http://tempuri.org/IDuplex/JoinResponse")]
        ClientApp.DuplexServiceReference.ClientData Join(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplex/TestService")]
        void TestService();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplex/SendResult")]
        void SendResult(ClientApp.DuplexServiceReference.ClientData clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplex/GetMatrixData", ReplyAction="http://tempuri.org/IDuplex/GetMatrixDataResponse")]
        int[][] GetMatrixData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplex/SetStage", ReplyAction="http://tempuri.org/IDuplex/SetStageResponse")]
        void SetStage(ClientApp.DuplexServiceReference.STAGE_TYPE type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplex/Test", ReplyAction="http://tempuri.org/IDuplex/TestResponse")]
        int Test();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplex/Message")]
        void Message(string content);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplex/SendData")]
        void SendData(ClientApp.DuplexServiceReference.ClientData clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplex/DataSync", ReplyAction="http://tempuri.org/IDuplex/DataSyncResponse")]
        int DataSync(int[][] matrix);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplex/StartWork")]
        void StartWork();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplex/JoinAccept")]
        void JoinAccept();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexChannel : ClientApp.DuplexServiceReference.IDuplex, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexClient : System.ServiceModel.DuplexClientBase<ClientApp.DuplexServiceReference.IDuplex>, ClientApp.DuplexServiceReference.IDuplex {
        
        public DuplexClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ClientApp.DuplexServiceReference.ClientData Join(string name) {
            return base.Channel.Join(name);
        }
        
        public void TestService() {
            base.Channel.TestService();
        }
        
        public void SendResult(ClientApp.DuplexServiceReference.ClientData clientData) {
            base.Channel.SendResult(clientData);
        }
        
        public int[][] GetMatrixData() {
            return base.Channel.GetMatrixData();
        }
        
        public void SetStage(ClientApp.DuplexServiceReference.STAGE_TYPE type) {
            base.Channel.SetStage(type);
        }
    }
}
